function move(robot, maxLineIndex, maxColumnIndex, nbOfMoves) {
    // robot.head = 'up';
    //nbOfMoves += 1;
    //return nbOfMoves;
    switch (robot.head) {
        case 'up' : {
            robot.position.line = robot.position.line + 1;
            nbOfMoves += 1;
            break;
        }
        case 'right': {
            robot.position.column = robot.position.column + 1;
            nbOfMoves += 1;
            break;
        }
        case 'down' : {
            robot.position.line = robot.position.line - 1;
            nbOfMoves += 1;
            break;
        }
        case 'left' : {
            robot.position.column = robot.position.column - 1;
            nbOfMoves += 1;
        }
    }


    return nbOfMoves;
}
/*
function turn(robot, step, turns) {

    switch(robot.head,step) {

        case ((robot.head === 'up') && (step === 'turn-right')): {
            robot.head = 'right';
            break;
        }
        case ((robot.head === 'right') && (step === 'turn-right')): {
            robot.head = 'down';
            break;
        }
        case ((robot.head === 'down') && (step === 'turn-right')): {
            robot.head = 'left';
            break;
        }
        case ((robot.head === 'left') && (step === 'turn-right')): {
            robot.head = 'up';
            break;
        }
        case ((robot.head === 'up') && (step === 'turn-left')): {
            robot.head = 'left';
            break;
        }
        case ((robot.head === 'left') && (step === 'turn-left')): {
            robot.head = 'down';
            break;
        }
        case ((robot.head === 'down') && (step === 'turn-left')): {
            robot.head = 'right'
        }
        case ((robot.head === 'right') && (step === 'turn-left')): {
            robot.head = 'up'
        }
            return ++turns;
    }
}
*/
//switch case with OR operator

function turn(robot, step, turns) {

    switch(robot.head,step) {

        case ((robot.head === 'up') && (step === 'turn-right')) ||((robot.head === 'down') && (step === 'turn-left')): {
            robot.head = 'right';
            break;
        }
        case ((robot.head === 'right') && (step === 'turn-right')) || ((robot.head === 'left') && (step === 'turn-left')):
        {
            robot.head = 'down';
            break;
        }
        case ((robot.head === 'down') && (step === 'turn-right')) || ((robot.head === 'up') && (step === 'turn-left')):
        {
            robot.head = 'left';
            break;
        }
        case ((robot.head === 'left') && (step === 'turn-right')) || ((robot.head === 'right') && (step === 'turn-left')):
        {
            robot.head = 'up';
            break;
        }

            return ++turns;
    }
}
